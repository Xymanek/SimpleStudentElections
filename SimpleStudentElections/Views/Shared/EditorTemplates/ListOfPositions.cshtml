@using SimpleStudentElections.Helpers
@model IList<SimpleStudentElections.Models.Forms.CouncilRoleForm>

@{
    BootstrapHorizontalForm horizontalForm = ViewData[FormConfig.ViewDataKey] as BootstrapHorizontalForm;

    if (horizontalForm == null)
    {
        throw new Exception("ListOfPositions editor template doesn't support non-bootstrap form config");
    }

    Layout = "Layouts/BootstrapHorizontal.cshtml";
}

@for (int i = 0; i < Model.Count; i++)
{
    <div style="margin-bottom: 5px">
        @{
            HtmlAttributeDictionary inputAttrs = new HtmlAttributeDictionary(Html.GetDictionaryFromViewBagValue(
                (object) ViewBag.inputAttributes,
                () => new Dictionary<string, object>() // Cannot return null so we replace it with empty dictionary
                ));

            inputAttrs["placeholder"] = "Role " + (i + 1);
            inputAttrs.AddClass("form-control");
            inputAttrs.AddClass(Html.StringIfFieldError(model => model));
            Html.AddDisabledConditionally(inputAttrs);
        }

        @Html.HiddenFor(model => model[i].Id) @* Needed to properly map back to existing positions for update *@
        @Html.TextBoxFor(model => model[i].Name, inputAttrs)
        @Html.ValidationMessageFor(model => model[i].Name, "", new {@class = "invalid-feedback"})
    </div>
}
