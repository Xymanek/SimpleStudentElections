@using System.Diagnostics
@using SimpleStudentElections.Logic
@using SimpleStudentElections.Models
@model SimpleStudentElections.Controllers.StudentController.VotingData

@{
    ViewBag.Title = Model.Election.Name + " | Voting";

    List<VotablePosition> positions = Model.PositionsData.Keys
        .OrderBy(position => position.Id)
        .ToList();
}

<h3>@Html.DisplayFor(m => m.Election.Name)</h3>
<div>
    @Html.Raw(Model.Election.Description)
</div>

@if (positions.Count > 0)
{
    <table class="table table-bordered">
        @foreach (VotablePosition position in positions)
        {
            PositionDisplayDataForVoting positionData = Model.PositionsData[position];

            <tr>
                <td style="width: 25%">
                    @position.HumanName
                </td>

                <td>
                    @switch (positionData.Status)
                    {
                        case PositionDisplayDataForVoting.PositionStatus.HasVoted:
                            <div class="text-muted">You already voted for this position</div>
                            break;

                        case PositionDisplayDataForVoting.PositionStatus.CannotVote:
                            <div class="text-muted">You cannot vote for this position</div>
                            break;

                        case PositionDisplayDataForVoting.PositionStatus.CanVote:
                            <div class="voting-positions-container">
                                @{
                                    ISet<DisplayNomineeEntry> nominees = positionData.NomineeEntries;
                                    Debug.Assert(nominees != null, "PositionDisplayDataForVoting.NomineeEntries != null");
        
                                    if (nominees.Count == 0)
                                    {
                                        <span class="text-muted">There is nobody nominated for this position</span>
                                    }
                                    else
                                    {
                                        foreach (DisplayNomineeEntry entry in nominees)
                                        {
                                            <div class="voting-position d-flex justify-content-between align-items-center">
                                                <div>
                                                    @Html.DisplayFor(m => entry)
                                                </div>
        
                                                <div>
                                                    <form class="d-inline" method="post" action="@Url.Action("VoteConfirmation")">
                                                        @Html.Hidden("nominationId", entry.ModelEntry.Id)
                                                        <button type="submit" class="btn btn-success">
                                                            Vote
                                                        </button>
                                                    </form>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            break;

                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </td>
            </tr>
        }
    </table>
}
else
{
    <p class="text-muted">There are no positions that are visible to you</p>
}